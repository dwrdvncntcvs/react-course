{"ast":null,"code":"import mongoose, { connect } from \"mongoose\";\n/** \r\nSource : \r\nhttps://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/utils/dbConnect.js \r\n**/\n\nconst MONGODB_URI = \"mongodb://localhost/next_db\";\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\n// let cached = global.mongoose;\n// if (!cached) {\n//   cached = global.mongoose = { conn: null, promise: null };\n// }\n\nasync function dbConnect() {\n  // if (cached.conn) {\n  //   return cached.conn;\n  // }\n  // if (!cached.promise) {\n  //   cached.promise = mongoose.connect(MONGODB_URI).then((mongoose) => {\n  //     return mongoose;\n  //   });\n  // }\n  // cached.conn = await cached.promise;\n  return await mongoose.connect(MONGODB_URI);\n}\n\nexport default dbConnect;","map":{"version":3,"sources":["D:/Builds/Tutorials/React/Section 23/meetup-app/database/mongodb/config.js"],"names":["mongoose","connect","MONGODB_URI","dbConnect"],"mappings":"AAAA,OAAOA,QAAP,IAAmBC,OAAnB,QAAkC,UAAlC;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,6BAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,eAAeC,SAAf,GAA2B;AACzB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAO,MAAMH,QAAQ,CAACC,OAAT,CAAiBC,WAAjB,CAAb;AACD;;AAED,eAAeC,SAAf","sourcesContent":["import mongoose, { connect } from \"mongoose\";\r\n\r\n/** \r\nSource : \r\nhttps://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/utils/dbConnect.js \r\n**/\r\n\r\nconst MONGODB_URI = \"mongodb://localhost/next_db\";\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\n// let cached = global.mongoose;\r\n\r\n// if (!cached) {\r\n//   cached = global.mongoose = { conn: null, promise: null };\r\n// }\r\n\r\nasync function dbConnect() {\r\n  // if (cached.conn) {\r\n  //   return cached.conn;\r\n  // }\r\n\r\n  // if (!cached.promise) {\r\n  //   cached.promise = mongoose.connect(MONGODB_URI).then((mongoose) => {\r\n  //     return mongoose;\r\n  //   });\r\n  // }\r\n  // cached.conn = await cached.promise;\r\n  return await mongoose.connect(MONGODB_URI);\r\n}\r\n\r\nexport default dbConnect;\r\n"]},"metadata":{},"sourceType":"module"}